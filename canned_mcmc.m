% This script uses the canned mcmc estimator from matlab to estimate EEJKT

addpath('matlab_mcmc')

cf_num = 0; %legacy, says that we are not running a counterfactual

fitfun = @(par,dat) distance_noprod(par, cf_num, 0);

model = struct('ssfun', fitfun);

% If (normal) prior mean and sigma are not set, this is diffuse prior
% {'par1',initial, min, max, pri_mu, pri_sig, targetflag, localflag}
params = struct;
params = {{'F_scale', 0.02325,0.001,10},...
          {'delta',0.25000,0.001,10},...
          {'scale_h', 0.20122,0.001,100},...
          {'scale_f_scale',0.21012,0.001,100},...
          {'cost_curvature',4.38118,1.01,100},...
          {'mean_prior',0.45325,0.001,0.999},...
          {'approx_var_prior',5.37071,0.001,100},...
          {'demand shock haz',0.42252,0.005,100},...
          {'demand shock size',0.52353,0.005,100},...
          {'shipment haz',10.16178,0.005,100},...
          {'reputation',1.87096,-10,10},...
          {'cost_scale',3.06159,0.001,100},...
          {'prod dispersion',0.58500,0.001,0.999}};

data = []; %our data is built into distance_noprod.m, no reason to pass it here

options= struct('nsimu',20000,'verbosity',100,'method','dram');

[results,chain,s2chain,sschain, hchain] = mcmcrun(model,data,params,options);

save results/canned_results

