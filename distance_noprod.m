function [D,W,error,simulated_data] = distance_noprod(X, cf_num, seed)
% This function takes a set of parameters and returns the distance between
% the moments in the data and the moments generated by the parameter set.

    try

    % Long format for printing
    format long;

    % Reset random number generator
    if seed == 1
        rng(80085);
    end
    
    % Start timer
    tic
    
    % Change X vector into parameter names
    X2params;

    fprintf('\r\n parameter vector: ');
    fprintf('\r\n%9.5f %9.5f %9.5f %9.5f %9.5f %9.5f %9.5f',X(1:7));
    fprintf('\r\n%9.5f %9.5f %9.5f %9.5f %9.5f %9.5f',X(8:13));
    fprintf( '\r\n  ');         
    
    
    % Get policy functions
    make_policy;

    % Check for convergence issues
    if my_flag == 1
        D = 1e12; W=1; error=1; simulated_data=1;
        return
    end 

    % Reset random number generator
    if seed == 1
        rng(80085);
    end

    % Simulate model and create loss function statistics
    [simulated_data,Model,diag_stats] = ...
        moms_nocell(mm,lambda_f_orig,lambda_h_orig,lambda_f_new,lambda_h_new,c_val_h_orig,c_val_f_orig,c_val_h_new,c_val_f_new,cf_num,increase,seed);
 
    
    %% Targets
    [Data, W] = target_stats();
    % to use diagonal of W, uncomment next command
    % W = diag(diag(W));
    
    %% Simulated data 

    % Construct loss
    
    error = Data'-Model;
    
    % To exclude intercepts of DANE-based regression, comment out next
    % two lines.
    
%    error(15) = 0; % intercept or dep. var. mean, exp_dom
%     Data(15) = 0; % intercept or dep. var. mean, exp_dom
%      error(18) = 0; % intercept or dep. var. mean, dom AR1
%      Data(18)  = 0; % intercept or dep. var. mean, dom AR1
    
      %W = eye(size(error,1)); %remove weights
    D = error'*(W^-1)*error;
    % D = norm(error)/norm(Data)
    
    % Log of D, for canned mcmc
    D = log(D);

    % Check for NaNs
    nanflag = isnan(D); 
    if nanflag>0;
        D = inf; 
    end

    % Create Diagnostics
    inv_W = W^-1;
    err_comp = @(sta,fin) error(sta:fin)' * inv_W(sta:fin,sta:fin) * error(sta:fin);
    match_death_coefs_err = err_comp(1,5);
    match_ar1_coefs_err   = err_comp(6,10);
    log_log_coefs_err     = err_comp(11,13);
    mavg_ship_coef_err    = err_comp(14,14);
    exp_dom_err           = err_comp(15,17);
    dom_ar1_err           = err_comp(18,20);
    match_lag_coef_err    = err_comp(21,26);
    last_match_coef_err   = err_comp(27,32);
    succ_rate_coef_err    = err_comp(33,34);
    sr_var_coef_err       = err_comp(35,36);
    for_sales_shr_err     = err_comp(37,37);
    exp_frac_err          = err_comp(38,38);
            
    mmm = cat(2,Data',Model); %data/model comparison
    
%    fprintf('\r\n params = ');
%    fprintf('\r\n%8.3f %8.3f %8.3f %8.3f %8.3f %8.3f %8.3f',X(1:7));
%    fprintf('\r\n%8.3f %8.3f %8.3f %8.3f %8.3f %8.3f',X(8:13));
%    fprintf( '\r\n  ');     
    
    
    fprintf('\r\n weighted metric:   %.15f\n', D); 
        
    %Simple unweighted loss
    Old_D = norm(error)/norm(Data');
    fprintf(' unweighted metric: %.15f\n', Old_D); 
    

    %Print loop time in minutes
    last_loop_run_time = toc/60
    

    % Write current results to running output files

%%    
    fitvec = [D Old_D];
    fileID2 = fopen('results/fitlog.txt','a');
      fprintf(fileID2,'\r\n fit metric = ');
      dlmwrite('results/fitlog.txt',fitvec,'-append','precision',12);
    fclose(fileID2);
 
    fileID1 = fopen('results/running_output.txt','a');

      fprintf(fileID1,'\r\n fit metrics (weighted and unweighted): ');
      dlmwrite('results/running_output.txt',fitvec,'-append','precision',12);
    
      fprintf(fileID1, '\r\n parameters: ');
      fprintf(fileID1, '\r\n%9.5f %9.5f %9.5f %9.5f %9.5f %9.5f %9.5f',X(1:7));
      fprintf(fileID1, '\r\n%9.5f %9.5f %9.5f %9.5f %9.5f %9.5f',X(8:13));
      fprintf(fileID1, '\r\n  ');

      
      fprintf(fileID1, '\r\n coefficients = ');   
      fprintf(fileID1, '\r\n%6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f',full(mmm(1:10,:)));  
      fprintf(fileID1, '\r\n  ');
      fprintf(fileID1, '\r\n%6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f',full(mmm(11:20,:)));  
      fprintf(fileID1, '\r\n  ');
      fprintf(fileID1, '\r\n%6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f',full(mmm(21:30,:)));  
      fprintf(fileID1, '\r\n  ');
      fprintf(fileID1, '\r\n%6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f %6.3f',full(mmm(31:38,:)));  
      fprintf(fileID1, '\r\n  ');   
      
      fprintf(fileID1, '\r\n number of exporters       = ');
          dlmwrite('results/running_output.txt',diag_stats(1),'-append','precision',12);
         fprintf(fileID1, ' maximum number of clients = ');
          dlmwrite('results/running_output.txt',diag_stats(2),'-append','precision',12);
      fprintf(fileID1, '\r\n  ');    
% 
      fprintf(fileID1, '\r\n match_death_coefs  = ');
         dlmwrite('results/running_output.txt',match_death_coefs_err,'-append','precision',12);
      fprintf(fileID1, ' match_ar1_coefs    = ');
         dlmwrite('results/running_output.txt',match_ar1_coefs_err,'-append','precision',12);  
      fprintf(fileID1, ' log_log_coefs      = ');
         dlmwrite('results/running_output.txt',log_log_coefs_err,'-append','precision',12);
      fprintf(fileID1, ' av_shipments       = ');
         dlmwrite('results/running_output.txt',mavg_ship_coef_err,'-append','precision',12);
      fprintf(fileID1, ' exp_dom            = ');
         dlmwrite('results/running_output.txt',exp_dom_err,'-append','precision',12);
      fprintf(fileID1, ' dom_ar1            = ');
         dlmwrite('results/running_output.txt',dom_ar1_err,'-append','precision',12);
      fprintf(fileID1, ' match_lag_coef     = ');
         dlmwrite('results/running_output.txt',match_lag_coef_err,'-append','precision',12);
      fprintf(fileID1, ' last_match_coef    = ');
         dlmwrite('results/running_output.txt',last_match_coef_err,'-append','precision',12);  
      fprintf(fileID1, ' succ_rate_coef     = ');
         dlmwrite('results/running_output.txt',succ_rate_coef_err,'-append','precision',12);
      fprintf(fileID1, ' sr_var_coef        = ');
         dlmwrite('results/running_output.txt',sr_var_coef_err,'-append','precision',12);
      fprintf(fileID1, ' for_sales_shr_coef = ');
         dlmwrite('results/running_output.txt',for_sales_shr_err,'-append','precision',12);
      fprintf(fileID1, ' exp_frac_coef      = ');
         dlmwrite('results/running_output.txt',exp_frac_err,'-append','precision',12);
%   
    fprintf(fileID1, '\r\n  ');              
    fclose(fileID1);
%%
    % replace weighted fit metric with old fit metric for test run 
%   D = Old_D;
 %%   
    % Free up memory
    clearvars -except D Old_D W error simulated_data
    % java.lang.Runtime.getRuntime.gc; %java garbage collector

    catch err

        % report error
        getReport(err, 'extended')
    
        % If broken for any reason, return high loss
        D = 1e12;
        W = 1; 
        error = 1;
        simulated_data = 1;
    
    end %end try/catch

end %end function

